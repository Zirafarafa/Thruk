Ext.define('TP.Pantab', {
    extend: 'Ext.panel.Panel',

    [% UNLESS (readonly || dashboard_ignore_changes) %]
    tooltip:     'double click to open settings',
    closable:    true,
    bodyCls:     'pantabbody',
    [% ELSE %]
    closable:    false,
    [% END %]
    stateful:    true,
    stateEvents: ['add', 'titlechange'],
    locked:      [% IF c.request.parameters.exists('unlocked') %]false[% ELSE %]true[% END %], // lock it by default
    initComponent: function() {
        if(this.xdata == undefined) {
            this.xdata = {};
        } else {
            this.xdata = TP.clone(this.xdata);
        }
        // defaults are set in panorama.pm

        // fetch window ids from ExtState
        this.window_ids = [];
        for(var key in ExtState) {
            var matches = key.match(/^(tabpan-tab_\d+)_panlet_(\d+)$/);
            if(matches && matches[1] == this.id) {
                this.window_ids.push(key);
            }
        }

        if(TP.initial_active_tab && TP.initial_active_tab == this.id && TP.initMask == undefined && this.window_ids.length > 1) {
            TP.initial_create_delay_active   = 0;
            TP.initial_create_delay_inactive = 0;
            TP.cur_panels                    = 1;
            TP.num_panels                    = this.window_ids.length;
            TP.initMask = new Ext.LoadMask(Ext.getBody(), {msg:"loading panel "+TP.cur_panels+'/'+TP.num_panels+"..."});
            TP.initMask.show();
            this.keepMask = true;
        }

        // contains the currently active backends
        this.activeBackends = undefined;
        this.callParent();
    },
    listeners: {
        beforeclose: function( This, eOpts ) {
            var tabpan = Ext.getCmp('tabpan');
            tabpan.saveState(); // recalculate open_tabs
            if(tabpan.open_tabs.length <= 1) {
                TP.Msg.msg("info_message~~cannot close last dashboard.");
                return false;
            }
            TP.log('['+This.id+'] closing tab');
            return true;
        },
        destroy: function( This, eOpts ) {
            TP.log('['+This.id+'] destroy');
            This.stopTimeouts();
            var tabpan = Ext.getCmp('tabpan');
            var window_ids = TP.clone(This.window_ids);
            for(var nr=0; nr<window_ids.length; nr++) {
                Ext.getCmp(window_ids[nr]).destroy();
            }
            cp.clear(This.id);
            // activate first tab
            if(!tabpan.getActiveTab()) {
                var tabs = Ext.query('.x-tab-closable');
                for(var nr=0; nr<tabs.length; nr++) {
                    if(tabpan.tabs_tr[tabs[nr].id] != undefined) {
                        tabpan.setActiveTab(tabpan.tabs_tr[tabs[nr].id]);
                    }
                }
            }
            if(This.bgDragEl) { This.bgDragEl.destroy(); }
            if(This.bgImgEl)  { This.bgImgEl.destroy();  }
            tabpan.saveState();
        },
        activate: function(This, eOpts) {
            TP.resetMoveIcons();
            var delay = 0;
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) { // may not yet exists due to delayed rendering
                    try {    // so allow it to fail
                        if(panlet.rendered == false) {
                            /* delay initial show when its not yet rendered */
                            window.setTimeout(Ext.bind(panlet.show, panlet, []), delay);
                            delay = delay + 50;
                        } else {
                            panlet.show(false);
                        }
                    } catch(e) {
                        TP.logError(panlet.id, "panelActivateException", e);
                    }
                }
            }
            var tabpan = Ext.getCmp('tabpan');
            if(delay > 0) {
                // make sure we hide all panlets if the user meanwhile changed tab again
                TP.timeouts['timeout_'+this.id+'_check_panel_show'] = window.setTimeout(function() {
                    if(This.id != tabpan.getActiveTab().id) {
                        // hide all except the active one
                        tabpan.checkPanletVisibility(tabpan.getActiveTab());
                    }
                }, delay + 100);
            }

            // save current active tab unless we are in tab rotation mode
            if(tabpan.xdata.rotate_tabs <= 0) {
                tabpan.saveState();
            }
            set_hash(this.id.replace(/^tabpan-tab_/, ''), 1);

            /* disable add button */
            if(Ext.getCmp('tabbar_addbtn')) {
                if(This.xdata.locked) {
                    Ext.getCmp('tabbar_addbtn').setDisabled(true).setIconCls('lock-tab');
                } else {
                    Ext.getCmp('tabbar_addbtn').setDisabled(false).setIconCls('gear-tab');
                }
            }

            // refresh icons
            if(TP.initialized) {
                if(delay > 0) {
                    window.setTimeout(Ext.bind(TP.updateAllIcons, This, [This]), delay + 100);
                } else {
                    TP.updateAllIcons(This);
                }
            }
            if(This.bgDragEl) { This.bgDragEl.show(); }
            if(This.bgImgEl)  { This.bgImgEl.show();  }
            TP.suppressIconTip = true;
            if(This.locked) {
                TP.suppressIconTip = false;
            }
            This.applyZindex();
        },
        hide: function(This, eOpts) {
            This.hidePanlets();
            if(This.bgDragEl) { This.bgDragEl.hide(); }
            if(This.bgImgEl)  { This.bgImgEl.hide();  }
        },
        afterrender: function(This, eOpts) {
            var tab = This;
            TP.log('['+tab.id+'] added tab - refresh: '+tab.xdata.refresh);
            if(!tab.title) {
                tab.applyXdata();
            } else {
                tab.setBackground(tab.xdata.background, tab.xdata.backgroundscale, tab.xdata.backgroundoffset_x, tab.xdata.backgroundoffset_y);
            }
            var header = tab.getDockedItems()[0];
            if(header) { header.hide() }
            tab.el.on("contextmenu", function(e) {
                tab.contextmenu(e);
            });
            tab.el.on("click", function(e) {
                if(!TP.skipResetMoveIcons) {
                    TP.resetMoveIcons();
                }
                TP.skipResetMoveIcons = false;
            });
        },
        beforerender: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) {
                    panlet.hide();
                }
            }
        },
        resize: function(This, adjWidth, adjHeight, eOpts) {
            This.adjustTabHeaderOffset();
        }
    },
    getState: function() {
        var state = {
            xdata: TP.clone(this.xdata)
        };
        delete state.xdata.locked;
        return state;
    },
    applyState: function(state) {
        this.callParent(arguments);
        if(state) {
            TP.log('['+this.id+'] applyState: '+Ext.JSON.encode(state));
            // REMOVE AFTER: 01.01.2016
            // migrate old settings
            if(state.xdata == undefined) { state.xdata = {} }
            var oldKeys = ['window_ids', 'background', 'title'];
            for(var x=0; x<oldKeys.length; x++) {
                var key = oldKeys[x];
                if(state[key]) {
                    state.xdata[key] = state[key];
                    delete this[key];
                    delete state[key];
                }
            }
            // migrate some global settings
            var global = Ext.getCmp('tabpan');
            var oldGlobals = ['refresh', 'backends', 'autohideheader'];
            for(var x=0; x<oldGlobals.length; x++) {
                var key = oldGlobals[x];
                if(global.xdata[key] != undefined) {
                    state.xdata[key] = global.xdata[key];
                }
            }

            // REMOVE AFTER: 01.01.2016
            if(state.xdata.window_ids) {
                this.window_ids = state.xdata.window_ids;
            }

            // create panlets
            for(var nr=0; nr<this.window_ids.length; nr++) {
                // delayed panlet creation
                var autoshow = false;
                var delay    = TP.initial_create_delay_inactive;
                if(TP.initial_active_tab != undefined && this.id == TP.initial_active_tab) {
                    autoshow = true;
                    delay    = TP.initial_create_delay_active;
                }
                var tabpan    = Ext.getCmp('tabpan');
                var activeTab = tabpan.getActiveTab();
                TP.timeouts['timeout_' + this.window_ids[nr] + '_render'] = window.setTimeout(Ext.bind(TP.add_panlet, this, [{id:this.window_ids[nr], skip_state:true, tb:this, autoshow:autoshow}, false]), delay);

                if(autoshow) {
                   TP.initial_create_delay_active   = TP.initial_create_delay_active   + 50;
                } else {
                   TP.initial_create_delay_inactive = TP.initial_create_delay_inactive + 30;
                }
            };
            Ext.apply(this.xdata, state.xdata);
            if(TP.initMask && this.keepMask) {
                TP.timeouts['timeout_'+this.id+'_remove_mask'] = window.setTimeout(function() {
                    if(TP.initMask) { TP.initMask.destroy(); delete TP.initMask; delete this.keepMask; }
                }, TP.initial_create_delay_active);
            }
        }
        this.applyXdata();
    },
    applyXdata: function(xdata, startTimeouts) {
        if(xdata == undefined) {
            xdata = this.xdata;
        }
        if(this.readonly == 1) {
            this.locked = true;
        }
        xdata.locked = this.locked;
        this.setLock(xdata.locked);
        this.setTitle(xdata.title);
        this.setBackground(xdata.background, xdata.backgroundscale, xdata.backgroundoffset_x, xdata.backgroundoffset_y);
        if(startTimeouts != false) {
            if(TP.initialized) {
                this.startTimeouts();
            } else {
                TP.timeouts['timeout_' + this.id + '_starttimeouts'] = window.setTimeout(Ext.bind(this.startTimeouts, this, []), 30000);
            }
        }
    },

    /* order icons by z-index */
    applyZindex: function() {
        var tabpan    = Ext.getCmp('tabpan');
        var activeTab = tabpan.getActiveTab();
        if(activeTab && this.id != activeTab.id) { return; } /* no need for zindex changes if we are not the active tab */

        if(this.window_ids) {
            var zIndexList = [];
            for(var nr=0; nr<this.window_ids.length; nr++) {
                var panlet = Ext.getCmp(this.window_ids[nr]);
                if(panlet) { // may not yet exists due to delayed rendering
                    var zIndex = panlet.effectiveZindex || 0;
                    zIndex = zIndex + 10;
                    if(zIndexList[zIndex] == undefined) { zIndexList[zIndex] = []; }
                    zIndexList[zIndex].push(panlet);
                }
            }
            Ext.Array.each(zIndexList, function(panels, id1) {
                if(panels != undefined) {
                    Ext.Array.each(panels, function(panel, id2) {
                        // may fail when not yet rendered
                        try { panel.toFront(); } catch(e) {}
                        if(panel.setIconLabel) { panel.setIconLabel(); }
                        if(panel.labelEl) { try { panel.labelEl.toFront(); } catch(e) {} }
                        if(panel.dragEl1) { try { panel.dragEl1.toFront(); } catch(e) {} }
                        if(panel.dragEl2) { try { panel.dragEl2.toFront(); } catch(e) {} }
                    });
                }
            });
        }
        TP.checkModalWindows();
    },

    hidePanlets: function() {
        var This = this;
        for(var nr=0; nr<This.window_ids.length; nr++) {
            var panlet = Ext.getCmp(This.window_ids[nr]);
            if(panlet) {
                panlet.hide(false);
            }
        }
    },

    /* start all timed actions for this tab and its panels */
    startTimeouts: function() {
        this.stopTimeouts();
        TP.log('['+this.id+'] startTimeouts');

        var tabpan    = Ext.getCmp('tabpan');
        var activeTab = tabpan.getActiveTab();

        /* ensure panels from the active tab are displayed */
        if(activeTab && this.id == activeTab.id) {
            if(this.window_ids) {
                for(var nr=0; nr<this.window_ids.length; nr++) {
                    var panlet = Ext.getCmp(this.window_ids[nr]);
                    if(panlet) { // may not yet exists due to delayed rendering
                        try {    // so allow it to fail
                            panlet.show(false);
                        } catch(e) {
                            TP.logError(this.id, "panelStarttimeoutException", e);
                        }
                    }
                }
            }
        }

        /* start refresh for all panlets with our refresh rate */
        var panels = TP.getAllPanel(this);
        if(panels.length > 0) {
            // spread panel reload
            var delay    = 0;
            var interval = 60 / panels.length;
            for(var nr=0; nr<panels.length; nr++) {
                var p = panels[nr];
                if(p.startTimeouts) {
                    window.clearTimeout(TP.timeouts['timeout_' + p.id + '_delayed_start']);
                    TP.timeouts['timeout_' + p.id + '_delayed_start'] = window.setTimeout(Ext.bind(p.startTimeouts, p, []), delay);
                    delay = delay + Math.round(interval*1000);
                }
                if(p.header) {
                    if(this.xdata.autohideheader) { p.header.hide() } else { p.header.show() }
                }
            }
        }
        var This = this;
        if(This.xdata && This.xdata.refresh > 0) {
            TP.timeouts['interval_global_icons' + This.id + '_refresh'] = window.setInterval(function() { TP.updateAllIcons(This) }, This.xdata.refresh * 1000);
            TP.updateAllIcons(This);
        }

        if(TP.initMask && !this.keepMask) { TP.initMask.destroy(); delete TP.initMask; }

        if(TP.dashboardsSettingWindow) {
            TP.dashboardsSettingWindow.body.unmask();
        }
        TP.checkModalWindows();
    },

    /* stop all timed actions for this tab and its panels */
    stopTimeouts: function() {
        TP.log('['+this.id+'] stopTimeouts');
        /* start refresh for all panlets with our refresh rate */
        var panels = TP.getAllPanel(this);
        for(var nr=0; nr<panels.length; nr++) {
            if(panels[nr].stopTimeouts) {
                panels[nr].stopTimeouts();
            }
        }

        window.clearInterval(TP.timeouts['interval_global_icons' + this.id + '_refresh']);
    },
    setBackground: function(background, scale, offset_x, offset_y, retries) {
        var This = this;
        if(retries == undefined) { retries = 0; }
        if(retries >= 5)         { return;      }
        var body = This.body;
        if(body == undefined)    { return; }
        if(!This.bgDragEl) {
            This.bgDragEl = body.createChild('<img>', body.dom.childNodes[0]);
            This.bgDragEl.dom.src            = background;
            This.bgDragEl.dom.style.position = "absolute";
            This.bgDragEl.dom.style.width    = "100%";
            This.bgDragEl.dom.style.height   = "100%";
            This.bgDragEl.dom.src = "[% url_prefix %]plugins/panorama/images/s.gif";
        }
        if(background != undefined && background != 'none') {
            if(!This.bgImgEl) {
                This.bgImgEl = body.createChild('<img>', body.dom.childNodes[0]);
            }
            This.bgImgEl.dom.src            = background;
            This.bgImgEl.dom.style.position = "absolute";
            if(scale == 100) {
                This.bgImgEl.dom.style.width  = "";
                This.bgImgEl.dom.style.height = "";
            } else {
                var naturalSize = TP.getNatural(background);
                if(naturalSize.width < 2 || naturalSize.height < 2) {
                    window.setTimeout(Ext.bind(This.setBackground, This, [background, scale, offset_x, offset_y, retries+1]), 500);
                    return;
                }
                var width  = Number(scale * naturalSize.width  / 100);
                var height = Number(scale * naturalSize.height / 100);
                This.bgImgEl.dom.style.width  = width+"px";
                This.bgImgEl.dom.style.height = height+"px";
            }
            This.bgImgEl.dom.style.top  = offset_y+"px";
            This.bgImgEl.dom.style.left = offset_x+"px";
        } else {
            if(This.bgImgEl) {
                This.bgImgEl.destroy();
                This.bgImgEl = undefined;
            }
        }
    },
    /* enable or disable locking for this tab and all panlet below */
    setLock: function(val) {
        var tab = this;
        var mask;
        var panels = TP.getAllPanel(this);
        if(tab.locked != val && panels.length > 0) {
            tab.mask = tab.body.mask((val ? "" : "un")+"locking dashboard...");
        }
        tab.xdata.locked   = val;
        tab.locked         = val;
        TP.suppressIconTip = !val;

        /* disable add button */
        if(Ext.getCmp('tabbar_addbtn')) {
            if(tab.xdata.locked) {
                Ext.getCmp('tabbar_addbtn').setDisabled(true).setIconCls('lock-tab');
            } else {
                Ext.getCmp('tabbar_addbtn').setDisabled(false).setIconCls('gear-tab');
            }
        }

        /* apply to all widgets and panels */
        for(var nr=0; nr<panels.length; nr++) {
            panels[nr].setLock(val);
        }
        /* schedule update, which also remove the mask from above */
        TP.updateAllIcons(this);
    },
    contextmenu: function(e, hidePasteAndNew) {
        var tab = this;
        /* right click context menu on tab body */
        e.preventDefault();
        TP.resetMoveIcons();
        var pos = [e.getX(), e.getY()];
        var nr = tab.id.replace(/^tabpan-tab_/, '');
        Ext.create('Ext.menu.Menu', {
            margin: '0 0 10 0',
            items: [{
                text:   'Refresh',
                icon:   '[% url_prefix %]plugins/panorama/images/arrow_refresh.png',
                handler: function() { TP.refreshAllSitePanel(tab) }
            }, '-', {
                text:   'Fullscreen',
                icon:   '[% url_prefix %]plugins/panorama/images/picture_empty.png',
                handler: function() {
                    var element = Ext.getBody().dom;
                    try {
                        BigScreen.request(element);
                    } catch(e) {
                        TP.logError(tab.id, "bigscreenException", e);
                    }
                },
                hidden:  !!BigScreen.element
            }, {
                text:   'Exit Fullscreen',
                icon:   '[% url_prefix %]plugins/panorama/images/pictures.png',
                handler: function() { BigScreen.exit(); },
                hidden:  !BigScreen.element
            }, {
[% IF one_tab_only %]
                text:       'Open Tab Mode',
                icon:       '[% url_prefix %]plugins/panorama/images/application_put.png',
                href:       'panorama.cgi#'+nr,
                tooltip:    'open this dashboard in tab mode'
[% ELSE %]
                text:       'Direct Link',
                icon:       '[% url_prefix %]plugins/panorama/images/application_put.png',
                href:       'panorama.cgi?map='+tab.xdata.title,
                hrefTarget: '_blank',
                tooltip:    'open this dashboard only (new window)'
[% END %]
            }, {
                text:   'Debug Information',
                icon:   '[% url_prefix %]plugins/panorama/images/information.png',
                handler: thruk_debug_window_handler,
                hidden:  [% IF !thruk_debug || c.config.demo_mode %]true[% ELSE %]false[% END %]
            }, '-'
            [% UNLESS readonly %]
            , {
                text:   'New',
                icon:   '[% url_prefix %]plugins/panorama/images/cog_add.png',
                hideOnClick: false,
                menu:    TP.addPanletsMenu({open: 'right'}),
                disabled: tab.xdata.locked,
                hidden:  hidePasteAndNew
            }, {
                text:   'Paste',
                icon:   '[% url_prefix %]plugins/panorama/images/page_paste.png',
                handler: function() {
                    var tb = Ext.getCmp('tabpan').getActiveTab();
                    if(TP.clipboard.state && TP.clipboard.state.xdata && TP.clipboard.state.xdata.appearance) {
                        // workaround for not existing gradient after copy&paste
                        if(TP.clipboard.state.xdata.appearance.piegradient) {
                            TP.clipboard.state.xdata.appearance.piegradient = Number(TP.clipboard.state.xdata.appearance.piegradient) + 0.001;
                        }
                        if(TP.clipboard.state.xdata.appearance.shapegradient) {
                            TP.clipboard.state.xdata.appearance.shapegradient = Number(TP.clipboard.state.xdata.appearance.shapegradient) + 0.001;
                        }
                    }
                    pos[0] = pos[0] - 8;
                    pos[1] = pos[1] - 8;
                    TP.add_panlet_handler(e, e.target, [tb, TP.clone(TP.clipboard), undefined, undefined, pos]);
                },
                disabled: (tab.xdata.locked || TP.clipboard == undefined),
                hidden:  hidePasteAndNew
            }, '-', {
                text:   'Dashboard Settings',
                icon:   '[% url_prefix %]plugins/panorama/images/cog.png',
                handler: function() { TP.tabSettingsWindow() },
                hidden:  tab.xdata.locked       // only show when not locked
            }, {
                text:   'Restore',
                icon:   '[% url_prefix %]plugins/panorama/images/book_previous.png',
                id:     'manualmenu',
                menu: [{
                    text:    'Create Restorepoint',
                    icon:    '[% url_prefix %]plugins/panorama/images/disk.png',
                    handler: function() { TP.createRestorePoint(tab, "m") }
                }, '-', {
                    text:       'Autosave',
                    hideOnClick: false,
                    id:         'autosavemenu',
                    icon:       '[% url_prefix %]plugins/panorama/images/shield.png',
                    menu:        [],
                    listeners: {
                        afterrender: function(item, eOpts) {
                            TP.setRestorePointsMenuItems(tab);
                        }
                    }
                }, {
                    text:    'Loading...',
                    icon:    '[% url_prefix %]plugins/panorama/images/loading-icon.gif',
                    disabled: true,
                    id:      'restorepointsloading'
                }],
                hidden:  tab.xdata.locked       // only show when not locked
            }, {
                text:   'Unlock Dashboard',
                icon:   '[% url_prefix %]plugins/panorama/images/lock_open.png',
                handler: function() { TP.createRestorePoint(tab, "a"); tab.setLock(false); },
                hidden:  !tab.xdata.locked      // only show when locked
            }, {
                text:   'Lock Dashboard',
                icon:   '[% url_prefix %]plugins/panorama/images/lock.png',
                handler: function() { tab.setLock(true); },
                hidden:  tab.xdata.locked       // only show when not locked
            }
            [% END %]
            ],
            listeners: {
                beforehide: function(menu, eOpts) { menu.destroy(); }
            }
        }).showAt(pos);
    },
    adjustTabHeaderOffset: function() {
        [%+ IF one_tab_only +%]
        var tab = this;
        var body = Ext.getBody();
        /* required for showing the background */
        tab.setSize(body.getSize());
        /* required due to missing tabbar */
        var bodyview = Ext.get("bodyview");
        bodyview.dom.style.position    = "relative";
        bodyview.dom.style.top         = "-25px";
        bodyview.dom.style.left        = "0";
        [%+ END +%]
    }
});

[% UNLESS readonly %]
Ext.onReady(function() {
    /* lasso for element selection */
    Ext.getBody().on("mouseup", function(e) {
        if(TP.lassoEl) {
            TP.lassoEl.destroy();
            TP.lassoEl = undefined;
            Ext.getBody().removeListener("mousemove", TP.lassoDragHandler);
            TP.createIconMoveKeyNav();
            TP.skipResetMoveIcons = true;
            window.setTimeout(function() { TP.skipResetMoveIcons = false; }, 50);
        }
    });
    Ext.getBody().on("dragstart", function(e) {
        e.preventDefault();
        var tabpan = Ext.getCmp('tabpan');
        var tab    = tabpan.getActiveTab();
        if(tab.locked) { return(false); };
        var pos = e.getXY();
        if(TP.lassoEl) { TP.lassoEl.destroy(); }
        TP.lassoEl = Ext.create('Ext.Component', {
            'html':     ' ',
            autoRender: true,
            autoShow:   true,
            shadow:     false,
            style: {
                position: 'absolute',
                border: '1px black dashed',
                top:     pos[1]+'px',
                left:    pos[0]+'px',
                width:   '1px',
                height:  '1px'
            }
        });
        TP.lassoEl.startPosition = pos;
        Ext.getBody().on("mousemove", TP.lassoDragHandler);
        return(false);
    });
});

[% END %]
/* handles dragging a lasso around icon elements to move them together */
TP.lassoDragHandler = function(e) {
    e.preventDefault();
    var mouse = e.getXY();
    TP.reduceDelayEvents(TP.lassoEl, function() {
        TP.lassoDragHandlerDo(mouse);
    }, 50, 'timeout_icon_lasso');
}

TP.lassoDragHandlerDo = function(mouse) {
    /* set new lasso size */
    window.clearTimeout(TP.timeouts['timeout_icon_lasso']);
    if(!TP.lassoEl) { return; }
    var start = TP.lassoEl.startPosition;
    var x = mouse[0]-start[0];
    var y = mouse[1]-start[1];
    if(x < 0 && y < 0) {
        TP.lassoEl.setPosition(mouse[0], mouse[1]);
        x = -x;
        y = -y;
    }
    else if(x < 0) {
        TP.lassoEl.setPosition(mouse[0], start[1]);
        x = -x;
    }
    else if(y < 0) {
        TP.lassoEl.setPosition(start[0], mouse[1]);
        y = -y;
    }
    TP.lassoEl.setSize(x, y);

    TP.reduceDelayEvents(TP.lassoEl, function() {
        TP.lassoMarkIcons(x, y);
    }, 50, 'timeout_icon_mark_update');
}

TP.lassoMarkIcons = function(x, y) {
    /* check marked elements */
    window.clearTimeout(TP.timeouts['timeout_icon_mark_update']);
    if(!TP.lassoEl) { return; }
    var lassoPos = TP.lassoEl.getPosition();
    var tabpan = Ext.getCmp('tabpan');
    var tab    = tabpan.getActiveTab();
    var panels = TP.getAllPanel(tab);
    TP.moveIcons = [];
    var elements = [];
    for(var nr=0; nr<panels.length; nr++) {
        var panel = panels[nr];
        if(panel.xdata.layout) { // only icons
            if(panel.xdata.appearance.type == "connector") {
                if(panel.dragEl1) { elements.push(panel.dragEl1); }
                if(panel.dragEl2) { elements.push(panel.dragEl2); }
            } else {
                elements.push(panel);
            }
        }
    }

    /* now check those elements */
    for(var nr=0; nr<elements.length; nr++) {
        var panel = elements[nr];
        var center = panel.getPosition();
        var size   = panel.getSize();
        center[0]  = center[0] + size.width/2;
        center[1]  = center[1] + size.height/2;
        if(center[0] > lassoPos[0] && center[1] > lassoPos[1] && center[0] < lassoPos[0] + x && center[1] < lassoPos[1] + y) {
            if(panel.iconType == "text") {
                panel.labelEl.el.dom.style.outline = "2px dotted orange";
            } else {
                panel.el.dom.style.outline = "2px dotted orange";
            }
            TP.moveIcons.push(panel);
        } else {
            panel.el.dom.style.outline = "";
        }
    }
}

/* restore dashboard to given timestamp */
TP.restoreDashboard = function(tab, timestamp, mode) {
    Ext.Msg.confirm('Reset to previous save point?', 'Do you really want to replace the current dashboard with the previous save version?', function(button) {
        if (button === 'yes') {
            Ext.Ajax.request({
                url:      'panorama.cgi?task=dashboard_restore&nr='+tab+'&timestamp='+timestamp+"&mode="+mode,
                method:  'POST',
                callback: function(options, success, response) {
                    if(!success) {
                        if(response.status == 0) {
                            TP.Msg.msg("fail_message~~restoring dashboard failed");
                        } else {
                            TP.Msg.msg("fail_message~~restoring dashboard failed: "+response.status+' - '+response.statusText);
                        }
                    } else {
                        TP.getResponse(undefined, response);
                        TP.Msg.msg("success_message~~restoring dashboard successful to "+strftime("%a %b %e %Y, %H:%M:%S", timestamp));
                    }
                }
            });
        }
    });
}


/* create restore point for dashboard */
TP.createRestorePoint = function(tab, mode) {
    Ext.Ajax.request({
        url:      'panorama.cgi?task=dashboard_restore_point&nr='+tab.id+"&mode="+mode,
        method:  'POST',
        callback: function(options, success, response) {
            if(!success) {
                if(response.status == 0) {
                    TP.Msg.msg("fail_message~~creating restore point failed");
                } else {
                    TP.Msg.msg("fail_message~~creating restore point failed: "+response.status+' - '+response.statusText);
                }
            } else {
                TP.getResponse(undefined, response);
                if(mode == "m") {
                    TP.Msg.msg("success_message~~created restore point successfully");
                }
            }
        }
    });
}

TP.setRestorePointsMenuItems = function(tab) {
    Ext.Ajax.request({
        url:      'panorama.cgi?task=dashboard_restore_list&nr='+tab.id,
        method:  'POST',
        callback: function(options, success, response) {
            if(!success) {
                if(response.status == 0) {
                    TP.Msg.msg("fail_message~~fetching dashboard restore points failed");
                } else {
                    TP.Msg.msg("fail_message~~fetching dashboard restore points failed: "+response.status+' - '+response.statusText);
                }
            } else {
                var data = TP.getResponse(undefined, response);
                data = data.data;
                var autosavemenu  = Ext.getCmp("autosavemenu").menu;
                if(autosavemenu == undefined) { return; } /* menu has been closed already */
                var manualmenu    = Ext.getCmp("manualmenu").menu;
                var restorepointsloading = Ext.getCmp("restorepointsloading");
                if(restorepointsloading) {
                    restorepointsloading.destroy();
                }
                var found = 0;
                for(var x=0; x<data.a.length; x++) {
                    found++;
                    autosavemenu.add({text:    strftime("%a %b %e %Y, %H:%M:%S", data.a[x].num),
                              val:     data.a[x].num,
                              style:  'text-align: right;',
                              icon:   '[% url_prefix %]plugins/panorama/images/clock_go.png',
                              handler: function() { TP.log('[global] restoring dashboard to: '+this.val); TP.restoreDashboard(tab.id, this.val, "a"); }
                            }
                    );
                }
                if(found == 0) {
                    autosavemenu.add({text: 'none', disabled: true});
                }
                for(var x=0; x<data.m.length; x++) {
                    manualmenu.add({text:    strftime("%a %b %e %Y, %H:%M:%S", data.m[x].num),
                              val:     data.m[x].num,
                              style:  'text-align: right;',
                              icon:   '[% url_prefix %]plugins/panorama/images/clock_go.png',
                              handler: function() { TP.log('[global] restoring dashboard to: '+this.val); TP.restoreDashboard(tab.id, this.val, "m"); }
                            }
                    );
                }
            }
        }
    })
}